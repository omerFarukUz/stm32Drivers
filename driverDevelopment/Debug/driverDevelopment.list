
driverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a34  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000be0  08000be0  00010be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c10  08000c10  00010c18  2**0
                  CONTENTS
  4 .ARM          00000000  08000c10  08000c10  00010c18  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c10  08000c18  00010c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c14  08000c14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c18  2**0
                  CONTENTS
 10 .bss          00000054  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000054  20000054  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c18  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010c48  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001732  00000000  00000000  00010c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000700  00000000  00000000  000123bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000180  00000000  00000000  00012ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000010a  00000000  00000000  00012c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002ec7  00000000  00000000  00012d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000028f1  00000000  00000000  00015c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000b365  00000000  00000000  00018502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004a0  00000000  00000000  00023868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00023d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000bc8 	.word	0x08000bc8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000bc8 	.word	0x08000bc8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <main>:
static void GPIO_Config(void);
static void UART_Config(void);


int main(void)
{
 80001fc:	b5b0      	push	{r4, r5, r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0

	//char msgToSend[]= "Hey Bro How Are You?\n";
	char receiveData[]="Hey Bro How Are You?\n";
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <main+0x48>)
 8000204:	463c      	mov	r4, r7
 8000206:	461d      	mov	r5, r3
 8000208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000210:	6020      	str	r0, [r4, #0]
 8000212:	3404      	adds	r4, #4
 8000214:	8021      	strh	r1, [r4, #0]

	GPIO_Config();
 8000216:	f000 f861 	bl	80002dc <GPIO_Config>
	UART_Config();
 800021a:	f000 f821 	bl	8000260 <UART_Config>

	USART_ReceiveData_IT(&USART_Handle, (uint8_t*)receiveData, 20);
 800021e:	463b      	mov	r3, r7
 8000220:	2214      	movs	r2, #20
 8000222:	4619      	mov	r1, r3
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <main+0x4c>)
 8000226:	f000 fc1f 	bl	8000a68 <USART_ReceiveData_IT>
	USART_TransmitData_IT(&USART_Handle, (uint8_t*)receiveData, strlen(receiveData));
 800022a:	463b      	mov	r3, r7
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffdd 	bl	80001ec <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	463b      	mov	r3, r7
 8000238:	4619      	mov	r1, r3
 800023a:	4803      	ldr	r0, [pc, #12]	; (8000248 <main+0x4c>)
 800023c:	f000 fbe8 	bl	8000a10 <USART_TransmitData_IT>
	/*
	USART_ReceiveData(&USART_Handle, (uint8_t*)msgToSend, 12);
	USART_TransmitData(&USART_Handle, (uint8_t*)msgToSend, strlen(msgToSend));*/


	while(1);
 8000240:	e7fe      	b.n	8000240 <main+0x44>
 8000242:	bf00      	nop
 8000244:	08000be0 	.word	0x08000be0
 8000248:	2000001c 	.word	0x2000001c

0800024c <USART2_IRQHandler>:
}



void USART2_IRQHandler()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	USART_InterruptHandler(&USART_Handle);
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <USART2_IRQHandler+0x10>)
 8000252:	f000 fc55 	bl	8000b00 <USART_InterruptHandler>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000001c 	.word	0x2000001c

08000260 <UART_Config>:




static void UART_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
	RCC_USART2_CLK_ENABLE();
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <UART_Config+0x70>)
 800026c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026e:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <UART_Config+0x70>)
 8000270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000274:	6413      	str	r3, [r2, #64]	; 0x40
 8000276:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <UART_Config+0x70>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027e:	607b      	str	r3, [r7, #4]

	USART_Handle.Instance = USART2;
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <UART_Config+0x74>)
 8000282:	4a15      	ldr	r2, [pc, #84]	; (80002d8 <UART_Config+0x78>)
 8000284:	601a      	str	r2, [r3, #0]
	USART_Handle.Init.Baudrate = 19200;
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <UART_Config+0x74>)
 8000288:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800028c:	609a      	str	r2, [r3, #8]
	USART_Handle.Init.HardwareFlowControl = USART_HW_NONE;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <UART_Config+0x74>)
 8000290:	2200      	movs	r2, #0
 8000292:	61da      	str	r2, [r3, #28]
	USART_Handle.Init.Mode = USART_MODE_Tx_Rx;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <UART_Config+0x74>)
 8000296:	220c      	movs	r2, #12
 8000298:	605a      	str	r2, [r3, #4]
	USART_Handle.Init.OverSampling = USART_OVERSAMPLING_16;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <UART_Config+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
	USART_Handle.Init.Parity = USART_PARITY_NONE;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <UART_Config+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
	USART_Handle.Init.StopBits = USART_STOPBITS_1;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <UART_Config+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
	USART_Handle.Init.WorldLength = USART_LENGTH_8Bits;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <UART_Config+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]


	USART_Init(&USART_Handle);
 80002b2:	4808      	ldr	r0, [pc, #32]	; (80002d4 <UART_Config+0x74>)
 80002b4:	f000 faf4 	bl	80008a0 <USART_Init>

	NVIC_EnableInterrupt(USART2_IRQn);
 80002b8:	2026      	movs	r0, #38	; 0x26
 80002ba:	f000 f86a 	bl	8000392 <NVIC_EnableInterrupt>

	USART_Active(&USART_Handle, ENABLE);
 80002be:	2101      	movs	r1, #1
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <UART_Config+0x74>)
 80002c2:	f000 fbfd 	bl	8000ac0 <USART_Active>

}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	2000001c 	.word	0x2000001c
 80002d8:	40004400 	.word	0x40004400

080002dc <GPIO_Config>:

static void GPIO_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
	GPIO_InitTypedef_t GPIO_InitStruct = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]

	RCC_GPIOA_CLK_ENABLE();
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <GPIO_Config+0x5c>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <GPIO_Config+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <GPIO_Config+0x5c>)
 8000304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.pinNumber = GPIO_PIN_2 | GPIO_PIN_3;
 800030c:	230c      	movs	r3, #12
 800030e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ALTERNATE;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_OSPEED_VERYHIGH;
 800031c:	2303      	movs	r3, #3
 800031e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF7;
 8000320:	2307      	movs	r3, #7
 8000322:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <GPIO_Config+0x60>)
 800032a:	f000 f866 	bl	80003fa <GPIO_Init>


}
 800032e:	bf00      	nop
 8000330:	3720      	adds	r7, #32
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800
 800033c:	40020000 	.word	0x40020000

08000340 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000340:	480d      	ldr	r0, [pc, #52]	; (8000378 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000342:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000344:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000348:	480c      	ldr	r0, [pc, #48]	; (800037c <LoopForever+0x6>)
  ldr r1, =_edata
 800034a:	490d      	ldr	r1, [pc, #52]	; (8000380 <LoopForever+0xa>)
  ldr r2, =_sidata
 800034c:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <LoopForever+0xe>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000350:	e002      	b.n	8000358 <LoopCopyDataInit>

08000352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000356:	3304      	adds	r3, #4

08000358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800035c:	d3f9      	bcc.n	8000352 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000360:	4c0a      	ldr	r4, [pc, #40]	; (800038c <LoopForever+0x16>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000364:	e001      	b.n	800036a <LoopFillZerobss>

08000366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000368:	3204      	adds	r2, #4

0800036a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800036c:	d3fb      	bcc.n	8000366 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036e:	f000 fc07 	bl	8000b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000372:	f7ff ff43 	bl	80001fc <main>

08000376 <LoopForever>:

LoopForever:
  b LoopForever
 8000376:	e7fe      	b.n	8000376 <LoopForever>
  ldr   r0, =_estack
 8000378:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	08000c18 	.word	0x08000c18
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	20000054 	.word	0x20000054

08000390 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>

08000392 <NVIC_EnableInterrupt>:
 * @param		IRQNumber   --->> IRQNumber of the Line
 * @retval		void
 */

void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 8000392:	b480      	push	{r7}
 8000394:	b085      	sub	sp, #20
 8000396:	af00      	add	r7, sp, #0
 8000398:	4603      	mov	r3, r0
 800039a:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]

	tempValue = *((IRQNumber>>5U) + NVIC_ISER0); // ilgili registerin adresini bulduk
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	095b      	lsrs	r3, r3, #5
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003ac:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x01U << (IRQNumber & 0x1FU)); // ilgili register'a bit seviyesinde ulastik ve temizledik
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 031f 	and.w	r3, r3, #31
 80003ba:	2201      	movs	r2, #1
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	4013      	ands	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x01U << (IRQNumber & 0x1FU));  // ilgili register'a istenilen degeri verdik yani enable ettik
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 031f 	and.w	r3, r3, #31
 80003ce:	2201      	movs	r2, #1
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	60fb      	str	r3, [r7, #12]
	*((IRQNumber>>5U) + NVIC_ISER0) = tempValue;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	095b      	lsrs	r3, r3, #5
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003e6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	601a      	str	r2, [r3, #0]

}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <GPIO_Init>:
 *
 * @retval		void
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypedef_t *GPIO_ConfigStruct)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b087      	sub	sp, #28
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
 8000402:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition=0,lastPosition=0;
 8000404:	2300      	movs	r3, #0
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]

	for (position = 0; position < 16 ; position++)
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	e0a0      	b.n	8000554 <GPIO_Init+0x15a>
	{
		fakePosition = (0x1 << position);
 8000412:	2201      	movs	r2, #1
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	613b      	str	r3, [r7, #16]
		lastPosition = ((uint32_t)(GPIO_ConfigStruct->pinNumber) & fakePosition) ;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	693a      	ldr	r2, [r7, #16]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]

		if (fakePosition == lastPosition)
 8000426:	693a      	ldr	r2, [r7, #16]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	429a      	cmp	r2, r3
 800042c:	f040 808f 	bne.w	800054e <GPIO_Init+0x154>
		{

			/*MODE CONFIG */
			uint32_t tempValue = GPIOx->MODER;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	60bb      	str	r3, [r7, #8]

			tempValue &= ~((0x3U) << (position*2) );
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	2203      	movs	r2, #3
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	4013      	ands	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->Mode << (position*2));
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	685a      	ldr	r2, [r3, #4]
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	4313      	orrs	r3, r2
 8000458:	60bb      	str	r3, [r7, #8]

			GPIOx->MODER = tempValue;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	68ba      	ldr	r2, [r7, #8]
 800045e:	601a      	str	r2, [r3, #0]

			if (GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_ALTERNATE )
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d003      	beq.n	8000470 <GPIO_Init+0x76>
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d12e      	bne.n	80004ce <GPIO_Init+0xd4>
			{
				/*OTYPE CONFIG */

				tempValue = GPIOx->OTYPER;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1 << position);
 8000476:	2201      	movs	r2, #1
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	fa02 f303 	lsl.w	r3, r2, r3
 800047e:	43db      	mvns	r3, r3
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	4013      	ands	r3, r2
 8000486:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Otype << position);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	689a      	ldr	r2, [r3, #8]
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	68ba      	ldr	r2, [r7, #8]
 8000494:	4313      	orrs	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68ba      	ldr	r2, [r7, #8]
 800049c:	605a      	str	r2, [r3, #4]


				/*OSPEED CONFIG */

				tempValue = GPIOx->OSPEEDR;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position*2));
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	2203      	movs	r2, #3
 80004aa:	fa02 f303 	lsl.w	r3, r2, r3
 80004ae:	43db      	mvns	r3, r3
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	4013      	ands	r3, r2
 80004b4:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Speed << (position*2));
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	691a      	ldr	r2, [r3, #16]
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	fa02 f303 	lsl.w	r3, r2, r3
 80004c2:	68ba      	ldr	r2, [r7, #8]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	609a      	str	r2, [r3, #8]

			}


			if (GPIO_ConfigStruct->Mode == GPIO_MODE_ALTERNATE)
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d123      	bne.n	800051e <GPIO_Init+0x124>
			{
				/*ALTERNATE FUNCTON CONFIG */

				tempValue = GPIOx->AFR[position >> 3U];
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	08da      	lsrs	r2, r3, #3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3208      	adds	r2, #8
 80004de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e2:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ((position & 0x7U)*4));
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	220f      	movs	r2, #15
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	4013      	ands	r3, r2
 80004f8:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ((position & 0x7U)*4));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	f003 0307 	and.w	r3, r3, #7
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	4313      	orrs	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	08da      	lsrs	r2, r3, #3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3208      	adds	r2, #8
 8000518:	68b9      	ldr	r1, [r7, #8]
 800051a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]



			/*PUPDR CONFIG */

			tempValue = GPIOx->PUPDR;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position*2));
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	2203      	movs	r2, #3
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	4013      	ands	r3, r2
 8000534:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->PuPd << (position*2));
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	68da      	ldr	r2, [r3, #12]
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	4313      	orrs	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	60da      	str	r2, [r3, #12]
	for (position = 0; position < 16 ; position++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	2b0f      	cmp	r3, #15
 8000558:	f67f af5b 	bls.w	8000412 <GPIO_Init+0x18>
		}


	}

}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	371c      	adds	r7, #28
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <RCC_GetSystemClock>:

const uint8_t AHB_Prescaler[] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};
const uint8_t APB_Prescaler[] = {0,0,0,0,1,2,3,4};

uint32_t RCC_GetSystemClock(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
	uint32_t SystemCoreClock = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
	uint8_t ClockSource = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	70fb      	strb	r3, [r7, #3]

	ClockSource = ((RCC->CFGR >> 2U) & (0x3U));
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <RCC_GetSystemClock+0x48>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	70fb      	strb	r3, [r7, #3]

	switch(ClockSource)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <RCC_GetSystemClock+0x28>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d003      	beq.n	800059a <RCC_GetSystemClock+0x2e>
 8000592:	e005      	b.n	80005a0 <RCC_GetSystemClock+0x34>
	{
	   case 0 : SystemCoreClock = 16000000; break;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <RCC_GetSystemClock+0x4c>)
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e004      	b.n	80005a4 <RCC_GetSystemClock+0x38>
	   case 1 : SystemCoreClock =  8000000; break;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <RCC_GetSystemClock+0x50>)
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e001      	b.n	80005a4 <RCC_GetSystemClock+0x38>
	   //case 2 : SystemCoreClock = 16000000; break;   PLL icin yapilmadi

	   default : SystemCoreClock = 16000000;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <RCC_GetSystemClock+0x4c>)
 80005a2:	607b      	str	r3, [r7, #4]
	}

	return SystemCoreClock;
 80005a4:	687b      	ldr	r3, [r7, #4]

}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	00f42400 	.word	0x00f42400
 80005bc:	007a1200 	.word	0x007a1200

080005c0 <RCC_GetHClock>:

uint32_t RCC_GetHClock(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
	uint32_t AHB_PeriphClock = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	uint32_t SystemCoreClock = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE_Value = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71bb      	strb	r3, [r7, #6]


	SystemCoreClock = RCC_GetSystemClock();
 80005d6:	f7ff ffc9 	bl	800056c <RCC_GetSystemClock>
 80005da:	60b8      	str	r0, [r7, #8]

	HPRE_Value = ((RCC->CFGR >> 4U)&(0xFF));
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <RCC_GetHClock+0x40>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	71fb      	strb	r3, [r7, #7]

	tempValue = AHB_Prescaler[HPRE_Value];
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <RCC_GetHClock+0x44>)
 80005e8:	5cd3      	ldrb	r3, [r2, r3]
 80005ea:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = (SystemCoreClock >> tempValue);
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	fa22 f303 	lsr.w	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]

	return AHB_PeriphClock;
 80005f6:	68fb      	ldr	r3, [r7, #12]

}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40023800 	.word	0x40023800
 8000604:	08000bf8 	.word	0x08000bf8

08000608 <RCC_GetPClock1>:

uint32_t RCC_GetPClock1(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
	uint32_t APB1_PeriphClock = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
	uint32_t Hclock = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE1_Value = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]

	Hclock = RCC_GetHClock();
 800061e:	f7ff ffcf 	bl	80005c0 <RCC_GetHClock>
 8000622:	60b8      	str	r0, [r7, #8]

	HPRE1_Value = ((RCC->CFGR >> 10U) & (0x7U));
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <RCC_GetPClock1+0x48>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	0a9b      	lsrs	r3, r3, #10
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0307 	and.w	r3, r3, #7
 8000630:	71fb      	strb	r3, [r7, #7]

	tempValue = APB_Prescaler[HPRE1_Value];
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	4a07      	ldr	r2, [pc, #28]	; (8000654 <RCC_GetPClock1+0x4c>)
 8000636:	5cd3      	ldrb	r3, [r2, r3]
 8000638:	71bb      	strb	r3, [r7, #6]

	APB1_PeriphClock = (Hclock >> tempValue);
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	fa22 f303 	lsr.w	r3, r2, r3
 8000642:	60fb      	str	r3, [r7, #12]

	return APB1_PeriphClock;
 8000644:	68fb      	ldr	r3, [r7, #12]

}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	08000c08 	.word	0x08000c08

08000658 <RCC_GetPClock2>:

uint32_t RCC_GetPClock2(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
	uint32_t APB2_PeriphClock = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
	uint32_t Hclock = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE2_Value = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	71bb      	strb	r3, [r7, #6]

	Hclock = RCC_GetHClock();
 800066e:	f7ff ffa7 	bl	80005c0 <RCC_GetHClock>
 8000672:	60b8      	str	r0, [r7, #8]

	HPRE2_Value = ((RCC->CFGR >> 13U) & (0x7U));
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <RCC_GetPClock2+0x48>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	0b5b      	lsrs	r3, r3, #13
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0307 	and.w	r3, r3, #7
 8000680:	71fb      	strb	r3, [r7, #7]

	tempValue = APB_Prescaler[HPRE2_Value];
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <RCC_GetPClock2+0x4c>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	71bb      	strb	r3, [r7, #6]

	APB2_PeriphClock = (Hclock >> tempValue); // İlgili clock , divided degeri kadar bolunmus oldu (saga shift edilerek)
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	fa22 f303 	lsr.w	r3, r2, r3
 8000692:	60fb      	str	r3, [r7, #12]

	return APB2_PeriphClock;
 8000694:	68fb      	ldr	r3, [r7, #12]

}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	08000c08 	.word	0x08000c08

080006a8 <closeUSART_ISR>:
#include "USART.h"

static void closeUSART_ISR(USART_HandleTypedef_t *USART_Handle)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	USART_Handle->TxBufferSize = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	849a      	strh	r2, [r3, #36]	; 0x24
	USART_Handle->pTxBuffer = NULL;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
	USART_Handle->TxStatus = USART_BUS_FREE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_TxEIE);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006d2:	60da      	str	r2, [r3, #12]


}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <closeUSART_ISR_Rx>:

static void closeUSART_ISR_Rx(USART_HandleTypedef_t *USART_Handle)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	USART_Handle->RxBufferSize = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	861a      	strh	r2, [r3, #48]	; 0x30
	USART_Handle->pRxBuffer = NULL;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
	USART_Handle->RxStatus = USART_BUS_FREE;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_RxNEIE);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	68da      	ldr	r2, [r3, #12]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f022 0220 	bic.w	r2, r2, #32
 800070a:	60da      	str	r2, [r3, #12]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <USART_SendWith_IT>:




static void USART_SendWith_IT(USART_HandleTypedef_t *USART_Handle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if ((USART_Handle->Init.WorldLength == USART_LENGTH_9Bits)&&(USART_Handle->Init.Parity == USART_PARITY_NONE))
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000728:	d11a      	bne.n	8000760 <USART_SendWith_IT+0x48>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d116      	bne.n	8000760 <USART_SendWith_IT+0x48>
	{
		uint16_t *p16BitsData = (uint16_t*)USART_Handle->pTxBuffer;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	60fb      	str	r3, [r7, #12]

		USART_Handle->Instance->DR = (uint16_t)(*p16BitsData & (uint16_t)0x01FFU);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000746:	605a      	str	r2, [r3, #4]
		USART_Handle->pTxBuffer += sizeof(uint16_t);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	1c9a      	adds	r2, r3, #2
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	621a      	str	r2, [r3, #32]
		USART_Handle->TxBufferSize -=2;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000756:	3b02      	subs	r3, #2
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	849a      	strh	r2, [r3, #36]	; 0x24
	{
 800075e:	e010      	b.n	8000782 <USART_SendWith_IT+0x6a>

	}
	else
	{
		USART_Handle->Instance->DR = (uint8_t)(*(USART_Handle->pTxBuffer)&(uint8_t)(0xFFU));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
		USART_Handle->pTxBuffer++;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	621a      	str	r2, [r3, #32]
		USART_Handle->TxBufferSize--;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800077a:	3b01      	subs	r3, #1
 800077c:	b29a      	uxth	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	849a      	strh	r2, [r3, #36]	; 0x24


	}

	if (USART_Handle->TxBufferSize == 0)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000786:	2b00      	cmp	r3, #0
 8000788:	d102      	bne.n	8000790 <USART_SendWith_IT+0x78>
	{
		closeUSART_ISR(USART_Handle);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff8c 	bl	80006a8 <closeUSART_ISR>
	}


}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <USART_GetWith_IT>:

static void USART_GetWith_IT(USART_HandleTypedef_t *USART_Handle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint16_t *p16BitsBuffer;
	uint8_t  *p8BitsBuffer;

	if ((USART_Handle->Init.WorldLength == USART_LENGTH_9Bits) && (USART_Handle->Init.Parity == USART_PARITY_NONE))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007a8:	d109      	bne.n	80007be <USART_GetWith_IT+0x26>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d105      	bne.n	80007be <USART_GetWith_IT+0x26>
	{
		p16BitsBuffer = (uint16_t*)(USART_Handle->pRxBuffer);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	60fb      	str	r3, [r7, #12]
		p8BitsBuffer = NULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e004      	b.n	80007c8 <USART_GetWith_IT+0x30>
	}
	else
	{
		p8BitsBuffer = (uint8_t*)(USART_Handle->pRxBuffer);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	60bb      	str	r3, [r7, #8]
		p16BitsBuffer = NULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]

	}

	if(p8BitsBuffer == NULL)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d114      	bne.n	80007f8 <USART_GetWith_IT+0x60>
	{
		*p16BitsBuffer = (uint16_t)(USART_Handle->Instance->DR & 0x01FFU);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007da:	b29a      	uxth	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	801a      	strh	r2, [r3, #0]
		USART_Handle->pRxBuffer += sizeof(uint16_t);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e4:	1c9a      	adds	r2, r3, #2
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
		USART_Handle->RxBufferSize -=2;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80007ee:	3b02      	subs	r3, #2
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	861a      	strh	r2, [r3, #48]	; 0x30
		}

	}


}
 80007f6:	e04f      	b.n	8000898 <USART_GetWith_IT+0x100>
		if((USART_Handle->Init.WorldLength == USART_LENGTH_9Bits) && (USART_Handle->Init.Parity != USART_PARITY_NONE))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000800:	d115      	bne.n	800082e <USART_GetWith_IT+0x96>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d011      	beq.n	800082e <USART_GetWith_IT+0x96>
			*p8BitsBuffer = (uint8_t)(USART_Handle->Instance->DR & 0x00FFU);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	701a      	strb	r2, [r3, #0]
			USART_Handle->pRxBuffer++;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
			USART_Handle->RxBufferSize--;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000824:	3b01      	subs	r3, #1
 8000826:	b29a      	uxth	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	861a      	strh	r2, [r3, #48]	; 0x30
 800082c:	e02d      	b.n	800088a <USART_GetWith_IT+0xf2>
		else if((USART_Handle->Init.WorldLength == USART_LENGTH_8Bits) && (USART_Handle->Init.Parity == USART_PARITY_NONE))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d115      	bne.n	8000862 <USART_GetWith_IT+0xca>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d111      	bne.n	8000862 <USART_GetWith_IT+0xca>
			*p8BitsBuffer = (uint8_t)(USART_Handle->Instance->DR & 0x00FFU);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	701a      	strb	r2, [r3, #0]
			USART_Handle->pRxBuffer++;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
			USART_Handle->RxBufferSize--;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000858:	3b01      	subs	r3, #1
 800085a:	b29a      	uxth	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	861a      	strh	r2, [r3, #48]	; 0x30
 8000860:	e013      	b.n	800088a <USART_GetWith_IT+0xf2>
			*p8BitsBuffer = (uint8_t)(USART_Handle->Instance->DR & 0x007FU);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800086e:	b2da      	uxtb	r2, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	701a      	strb	r2, [r3, #0]
			USART_Handle->pRxBuffer++;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
			USART_Handle->RxBufferSize--;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000882:	3b01      	subs	r3, #1
 8000884:	b29a      	uxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	861a      	strh	r2, [r3, #48]	; 0x30
		if(USART_Handle->RxBufferSize == 0)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <USART_GetWith_IT+0x100>
			closeUSART_ISR_Rx(USART_Handle);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff24 	bl	80006e0 <closeUSART_ISR_Rx>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <USART_Init>:



void USART_Init(USART_HandleTypedef_t *USART_Handle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	uint32_t periphClock = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
	uint32_t mantissaPart = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
	uint32_t fractionPart = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
	uint32_t USART_DIV_Value = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
	uint32_t tempValue = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]

	/******  OverSampling  ***  WorldLength  *** Parity  *** Mode  ***********************/
	uint32_t tempReg = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]

	tempReg = USART_Handle->Instance->CR1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	60bb      	str	r3, [r7, #8]

	tempReg |= (USART_Handle->Init.OverSampling) | (USART_Handle->Init.WorldLength) | (USART_Handle->Init.Parity) | (USART_Handle->Init.Mode);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	431a      	orrs	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]

	USART_Handle->Instance->CR1 = tempReg;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	60da      	str	r2, [r3, #12]

	/******  StopBits  *******************************************************************/

	tempReg = USART_Handle->Instance->CR2;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	60bb      	str	r3, [r7, #8]

	tempReg &= ~(0x3U << USART_CR2_STOP);
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008fa:	60bb      	str	r3, [r7, #8]

	tempReg |= (USART_Handle->Init.StopBits);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	4313      	orrs	r3, r2
 8000904:	60bb      	str	r3, [r7, #8]

	USART_Handle->Instance->CR2 = tempReg;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	611a      	str	r2, [r3, #16]

	/******  HardwareFlowControl  ********************************************************/

	tempReg = USART_Handle->Instance->CR3;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	60bb      	str	r3, [r7, #8]

	tempReg |= (USART_Handle->Init.HardwareFlowControl);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	4313      	orrs	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]

	USART_Handle->Instance->CR3 = tempReg;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	615a      	str	r2, [r3, #20]

	/******  BaudRate Configuration  ********************************************************/

	if (USART_Handle->Instance == USART1 || USART_Handle->Instance == USART6)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a35      	ldr	r2, [pc, #212]	; (8000a04 <USART_Init+0x164>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d004      	beq.n	800093c <USART_Init+0x9c>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a34      	ldr	r2, [pc, #208]	; (8000a08 <USART_Init+0x168>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d103      	bne.n	8000944 <USART_Init+0xa4>
	{
		periphClock = RCC_GetPClock2();
 800093c:	f7ff fe8c 	bl	8000658 <RCC_GetPClock2>
 8000940:	61f8      	str	r0, [r7, #28]
 8000942:	e002      	b.n	800094a <USART_Init+0xaa>
	}
	else
	{
		periphClock = RCC_GetPClock1();
 8000944:	f7ff fe60 	bl	8000608 <RCC_GetPClock1>
 8000948:	61f8      	str	r0, [r7, #28]
	}


	if (USART_Handle->Init.OverSampling == USART_OVERSAMPLING_8)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000952:	d123      	bne.n	800099c <USART_Init+0xfc>
	{
		USART_DIV_Value = __USART_DIV_VALUE_8(periphClock,USART_Handle->Init.Baudrate);
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	009a      	lsls	r2, r3, #2
 800095e:	441a      	add	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	613b      	str	r3, [r7, #16]
		mantissaPart = (USART_DIV_Value / 100U);
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <USART_Init+0x16c>)
 8000970:	fba2 2303 	umull	r2, r3, r2, r3
 8000974:	095b      	lsrs	r3, r3, #5
 8000976:	61bb      	str	r3, [r7, #24]
		fractionPart = ((USART_DIV_Value) - (mantissaPart * 100U));
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2264      	movs	r2, #100	; 0x64
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	617b      	str	r3, [r7, #20]

		fractionPart = ( ( (fractionPart * 8U ) + 50U ) / 100U ) & (0x07U);
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	3332      	adds	r3, #50	; 0x32
 800098c:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <USART_Init+0x16c>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e022      	b.n	80009e2 <USART_Init+0x142>
	}
	else
	{
		USART_DIV_Value = __USART_DIV_VALUE_16(periphClock,USART_Handle->Init.Baudrate);
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009a      	lsls	r2, r3, #2
 80009a6:	441a      	add	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	613b      	str	r3, [r7, #16]
		mantissaPart = (USART_DIV_Value / 100U);
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <USART_Init+0x16c>)
 80009b8:	fba2 2303 	umull	r2, r3, r2, r3
 80009bc:	095b      	lsrs	r3, r3, #5
 80009be:	61bb      	str	r3, [r7, #24]
		fractionPart = ( (USART_DIV_Value) - (mantissaPart * 100U));
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2264      	movs	r2, #100	; 0x64
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
		fractionPart = ( ( (fractionPart * 16U ) + 50U ) / 100U ) & (0x0FU);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	3332      	adds	r3, #50	; 0x32
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <USART_Init+0x16c>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	617b      	str	r3, [r7, #20]

	}


	tempValue |= (mantissaPart << 4U);
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
	tempValue |= fractionPart;
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]


	USART_Handle->Instance->BRR = tempValue;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	609a      	str	r2, [r3, #8]





}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40011400 	.word	0x40011400
 8000a0c:	51eb851f 	.word	0x51eb851f

08000a10 <USART_TransmitData_IT>:




void USART_TransmitData_IT(USART_HandleTypedef_t *USART_Handle , uint8_t *pData , uint16_t dataSize)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	80fb      	strh	r3, [r7, #6]

	USART_BusState_t usartBusState = USART_Handle->TxStatus;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a24:	75fb      	strb	r3, [r7, #23]

	if (usartBusState != USART_BUS_Tx)
 8000a26:	7dfb      	ldrb	r3, [r7, #23]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d014      	beq.n	8000a56 <USART_TransmitData_IT+0x46>
	{
		USART_Handle->pTxBuffer = (uint8_t*)pData;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	621a      	str	r2, [r3, #32]
		USART_Handle->TxBufferSize = (uint16_t)dataSize;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	88fa      	ldrh	r2, [r7, #6]
 8000a36:	849a      	strh	r2, [r3, #36]	; 0x24
		USART_Handle->TxStatus = USART_BUS_Tx;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		USART_Handle->TxISR_Function = USART_SendWith_IT;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <USART_TransmitData_IT+0x54>)
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28


		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_TxEIE);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a54:	60da      	str	r2, [r3, #12]


	}


}
 8000a56:	bf00      	nop
 8000a58:	371c      	adds	r7, #28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	08000719 	.word	0x08000719

08000a68 <USART_ReceiveData_IT>:

void USART_ReceiveData_IT(USART_HandleTypedef_t *USART_Handle , uint8_t *pBuffer , uint16_t dataSize)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	4613      	mov	r3, r2
 8000a74:	80fb      	strh	r3, [r7, #6]
	USART_BusState_t usartBusState = USART_Handle->RxStatus;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a7c:	75fb      	strb	r3, [r7, #23]

	if(usartBusState != USART_BUS_Rx)
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d014      	beq.n	8000aae <USART_ReceiveData_IT+0x46>
	{
		USART_Handle->pRxBuffer = (uint8_t*)pBuffer;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
		USART_Handle->RxBufferSize = (uint16_t)dataSize;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	861a      	strh	r2, [r3, #48]	; 0x30
		USART_Handle->RxStatus = USART_BUS_Rx;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2202      	movs	r2, #2
 8000a94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		USART_Handle->RxISR_Funciton = USART_GetWith_IT;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <USART_ReceiveData_IT+0x54>)
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34

		USART_Handle->Instance->CR1 |= (0x01U << USART_CR1_RxNEIE);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f042 0220 	orr.w	r2, r2, #32
 8000aac:	60da      	str	r2, [r3, #12]
	}

}
 8000aae:	bf00      	nop
 8000ab0:	371c      	adds	r7, #28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	08000799 	.word	0x08000799

08000ac0 <USART_Active>:




void USART_Active(USART_HandleTypedef_t *USART_Handle , FunctionalState_t stateOfUsart)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	70fb      	strb	r3, [r7, #3]

	if (stateOfUsart == ENABLE)
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d108      	bne.n	8000ae4 <USART_Active+0x24>
	{
		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_UE);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ae0:	60da      	str	r2, [r3, #12]
	{
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_UE);
	}


}
 8000ae2:	e007      	b.n	8000af4 <USART_Active+0x34>
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_UE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000af2:	60da      	str	r2, [r3, #12]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <USART_InterruptHandler>:
	return((USART_Handle->Instance->SR & flagName) ? USART_FLAG_SET : USART_FLAG_RESET);
}


void USART_InterruptHandler(USART_HandleTypedef_t *USART_Handle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint8_t flagValue = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptValue = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73bb      	strb	r3, [r7, #14]


	flagValue = (uint8_t)(USART_Handle->Instance->SR >> 7U) & (0x1U);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	09db      	lsrs	r3, r3, #7
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
	interruptValue = (uint8_t)(USART_Handle->Instance->CR1 >> 7U) & (0x1U);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	09db      	lsrs	r3, r3, #7
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	73bb      	strb	r3, [r7, #14]

	if (flagValue && interruptValue)
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <USART_InterruptHandler+0x44>
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <USART_InterruptHandler+0x44>
	{
		USART_Handle->TxISR_Function(USART_Handle);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	4798      	blx	r3
	}


	flagValue = (uint8_t)(USART_Handle->Instance->SR >> 5U) & (0x1U);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	095b      	lsrs	r3, r3, #5
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
	interruptValue = (uint8_t)(USART_Handle->Instance->CR1 >> 5U) & (0x1U);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	73bb      	strb	r3, [r7, #14]

	if (flagValue && interruptValue)
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <USART_InterruptHandler+0x78>
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <USART_InterruptHandler+0x78>
	{
		USART_Handle->RxISR_Funciton(USART_Handle);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	4798      	blx	r3
	}

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <__libc_init_array>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	4d0d      	ldr	r5, [pc, #52]	; (8000bb8 <__libc_init_array+0x38>)
 8000b84:	4c0d      	ldr	r4, [pc, #52]	; (8000bbc <__libc_init_array+0x3c>)
 8000b86:	1b64      	subs	r4, r4, r5
 8000b88:	10a4      	asrs	r4, r4, #2
 8000b8a:	2600      	movs	r6, #0
 8000b8c:	42a6      	cmp	r6, r4
 8000b8e:	d109      	bne.n	8000ba4 <__libc_init_array+0x24>
 8000b90:	4d0b      	ldr	r5, [pc, #44]	; (8000bc0 <__libc_init_array+0x40>)
 8000b92:	4c0c      	ldr	r4, [pc, #48]	; (8000bc4 <__libc_init_array+0x44>)
 8000b94:	f000 f818 	bl	8000bc8 <_init>
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	10a4      	asrs	r4, r4, #2
 8000b9c:	2600      	movs	r6, #0
 8000b9e:	42a6      	cmp	r6, r4
 8000ba0:	d105      	bne.n	8000bae <__libc_init_array+0x2e>
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba8:	4798      	blx	r3
 8000baa:	3601      	adds	r6, #1
 8000bac:	e7ee      	b.n	8000b8c <__libc_init_array+0xc>
 8000bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb2:	4798      	blx	r3
 8000bb4:	3601      	adds	r6, #1
 8000bb6:	e7f2      	b.n	8000b9e <__libc_init_array+0x1e>
 8000bb8:	08000c10 	.word	0x08000c10
 8000bbc:	08000c10 	.word	0x08000c10
 8000bc0:	08000c10 	.word	0x08000c10
 8000bc4:	08000c14 	.word	0x08000c14

08000bc8 <_init>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	bf00      	nop
 8000bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bce:	bc08      	pop	{r3}
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	4770      	bx	lr

08000bd4 <_fini>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	bf00      	nop
 8000bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bda:	bc08      	pop	{r3}
 8000bdc:	469e      	mov	lr, r3
 8000bde:	4770      	bx	lr
